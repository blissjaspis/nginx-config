# nginx.conf - Best Practices Configuration
# Optimized for security, performance, and scalability

# Run nginx as user nginx
user nginx;

# Set number of worker processes to auto (one per CPU core)
worker_processes auto;

# Set worker process priority (lower number = higher priority)
worker_priority -10;

# Maximum number of file descriptors per worker process
worker_rlimit_nofile 65535;

# PID file location
pid /run/nginx.pid;

# Include dynamic modules
include /etc/nginx/modules-enabled/*.conf;

# Events block - handles connection processing
events {
    # Use epoll for Linux (more efficient than select/poll)
    use epoll;
    
    # Maximum number of simultaneous connections per worker process
    worker_connections 2048;
    
    # Accept multiple connections at once
    multi_accept on;
    
    # Don't block on accept()
    accept_mutex off;
}

# HTTP block - main configuration
http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # Timeout settings
    keepalive_timeout 30;
    keepalive_requests 1000;
    client_header_timeout 20;
    client_body_timeout 20;
    reset_timedout_connection on;
    send_timeout 20;
    
    # Buffer settings
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_body_buffer_size 8k;
    client_max_body_size 2m;
    
    # Hide nginx version for security
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Charset
    charset utf-8;
    
    # Logging Configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # Access log configuration
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_disable "msie6";
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Brotli Compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;
    
    # Security Headers (Global)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=wplogin:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=wpadmin:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=xmlrpc:10m rate=1r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn addr 10;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # DH parameters for DHE ciphers
    # ssl_dhparam /etc/ssl/certs/dhparam.pem;
    
    # DNS resolver for OCSP stapling
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Proxy Settings (Global)
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size 256k;
    proxy_max_temp_file_size 1024m;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    
    # FastCGI Settings
    fastcgi_connect_timeout 60;
    fastcgi_send_timeout 180;
    fastcgi_read_timeout 180;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 4 256k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;
    fastcgi_intercept_errors on;
    
    # File Cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Map for real IP (when behind load balancer)
    map $http_x_forwarded_for $real_ip {
        ~^(\d+\.\d+\.\d+\.\d+) $1;
        default $remote_addr;
    }
    
    # Block common malicious requests
    map $request_method $bad_method {
        default 0;
        ~(?i)(TRACE|DELETE|TRACK) 1;
    }
    
    # Block bad user agents
    map $http_user_agent $bad_bot {
        default 0;
        ~*(?i)(bot|crawler|spider|scraper|python|curl|wget) 1;
        ~*(?i)(nikto|sqlmap|nessus|openvas|nmap) 1;
    }
    
    # Block bad referers
    map $http_referer $bad_referer {
        default 0;
        ~*(?i)(baidu|yandex|mail\.ru|semalt) 1;
    }
    
    # Default server (catch-all for unmatched domains)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        
        server_name _;
        
        # Self-signed certificate for default server
        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
        
        # Block all requests to default server
        return 444;
    }
    
    # Security server block for blocking malicious requests
    server {
        listen 80;
        listen [::]:80;
        
        # Block bad methods
        if ($bad_method) {
            return 405;
        }
        
        # Block bad bots (adjust as needed)
        # if ($bad_bot) {
        #     return 403;
        # }
        
        # Block requests with no User-Agent
        if ($http_user_agent = "") {
            return 403;
        }
        
        # Block requests with suspicious query strings
        if ($args ~* "(\<|%3C).*script.*(\>|%3E)") {
            return 403;
        }
        
        if ($args ~* "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
            return 403;
        }
        
        if ($args ~* "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
            return 403;
        }
        
        # Block SQL injection attempts
        if ($args ~* "concat.*\(") {
            return 403;
        }
        
        if ($args ~* "union.*select.*\(") {
            return 403;
        }
        
        if ($args ~* "union.*all.*select.*") {
            return 403;
        }
    }
    
    # Include additional configuration files
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}

# Stream block for TCP/UDP proxy (if needed)
# stream {
#     upstream backend {
#         server backend1.example.com:12345;
#         server backend2.example.com:12345;
#     }
#     
#     server {
#         listen 12345;
#         proxy_pass backend;
#     }
# }
